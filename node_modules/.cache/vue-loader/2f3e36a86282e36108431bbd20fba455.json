{"remainingRequest":"G:\\webstore\\vue-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\webstore\\vue-admin\\src\\views\\goods\\Add.vue?vue&type=style&index=0&id=31378d9e&lang=less&scoped=true&","dependencies":[{"path":"G:\\webstore\\vue-admin\\src\\views\\goods\\Add.vue","mtime":1568165755898},{"path":"G:\\webstore\\vue-admin\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\webstore\\vue-admin\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"G:\\webstore\\vue-admin\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"G:\\webstore\\vue-admin\\node_modules\\less-loader\\dist\\cjs.js","mtime":1628673012340},{"path":"G:\\webstore\\vue-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\webstore\\vue-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5lbC1jaGVja2JveCB7DQogIG1hcmdpbjogMCAxMHB4IDAgMCAhaW1wb3J0YW50Ow0KfQ0KDQoucHJldmlld0ltZyB7DQogIHdpZHRoOiAxMDAlOw0KfQ0KDQouYnRuQWRkIHsNCiAgbWFyZ2luLXRvcDogMTVweDsNCn0NCg=="},{"version":3,"sources":["Add.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgSA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"Add.vue","sourceRoot":"src/views/goods","sourcesContent":["<template>\r\n  <div>\r\n    <!-- 面包屑导航区域 -->\r\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n      <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\r\n      <el-breadcrumb-item>商品管理</el-breadcrumb-item>\r\n      <el-breadcrumb-item>添加商品</el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n\r\n    <!-- 卡片视图 -->\r\n    <el-card>\r\n      <!-- 提示区域 -->\r\n      <el-alert title=\"添加商品信息\" type=\"info\" center show-icon :closable=\"false\">\r\n      </el-alert>\r\n      <!-- 步骤条区域 -->\r\n      <el-steps :space=\"200\" :active=\"activeIndex - 0\" finish-status=\"success\" align-center>\r\n        <el-step title=\"基本信息\"></el-step>\r\n        <el-step title=\"商品参数\"></el-step>\r\n        <el-step title=\"商品属性\"></el-step>\r\n        <el-step title=\"商品图片\"></el-step>\r\n        <el-step title=\"商品内容\"></el-step>\r\n        <el-step title=\"完成\"></el-step>\r\n      </el-steps>\r\n\r\n      <!-- tab栏区域 -->\r\n\r\n      <el-form :model=\"addForm\" :rules=\"addFormRules\" ref=\"addFormRef\" label-width=\"100px\" label-position=\"top\">\r\n        <el-tabs v-model=\"activeIndex\" :tab-position=\"'left'\" :before-leave=\"beforeTabLeave\" @tab-click=\"tabClicked\">\r\n          <el-tab-pane label=\"基本信息\" name=\"0\">\r\n            <el-form-item label=\"商品名称\" prop=\"goods_name\">\r\n              <el-input v-model=\"addForm.goods_name\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"商品价格\" prop=\"goods_price\">\r\n              <el-input v-model=\"addForm.goods_price\" type=\"number\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"商品重量\" prop=\"goods_weight\">\r\n              <el-input v-model=\"addForm.goods_weight\" type=\"number\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"商品数量\" prop=\"goods_number\">\r\n              <el-input v-model=\"addForm.goods_number\" type=\"number\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"商品分类\" prop=\"goods_cat\">\r\n              <el-cascader expand-trigger=\"hover\" :options=\"catelist\" :props=\"cateProps\" v-model=\"addForm.goods_cat\" @change=\"handleChange\">\r\n              </el-cascader>\r\n            </el-form-item>\r\n          </el-tab-pane>\r\n          <el-tab-pane label=\"商品参数\" name=\"1\">\r\n            <!-- 渲染表单的Item项 -->\r\n            <el-form-item :label=\"item.attr_name\" v-for=\"item in manyTableData\" :key=\"item.attr_id\">\r\n              <!-- 复选框组 -->\r\n              <el-checkbox-group v-model=\"item.attr_vals\">\r\n                <el-checkbox :label=\"cb\" v-for=\"(cb, i) in item.attr_vals\" :key=\"i\" border></el-checkbox>\r\n              </el-checkbox-group>\r\n            </el-form-item>\r\n          </el-tab-pane>\r\n          <el-tab-pane label=\"商品属性\" name=\"2\">\r\n            <el-form-item :label=\"item.attr_name\" v-for=\"item in onlyTableData\" :key=\"item.attr_id\">\r\n              <el-input v-model=\"item.attr_vals\"></el-input>\r\n            </el-form-item>\r\n          </el-tab-pane>\r\n          <el-tab-pane label=\"商品图片\" name=\"3\">\r\n            <!-- action 表示图片要上传到的后台API地址 -->\r\n            <el-upload :action=\"uploadURL\" :on-preview=\"handlePreview\" :on-remove=\"handleRemove\" list-type=\"picture\" :headers=\"headerObj\" :on-success=\"handleSuccess\">\r\n              <el-button size=\"small\" type=\"primary\">点击上传</el-button>\r\n            </el-upload>\r\n          </el-tab-pane>\r\n          <el-tab-pane label=\"商品内容\" name=\"4\">\r\n            <!-- 富文本编辑器组件 -->\r\n            <quill-editor v-model=\"addForm.goods_introduce\"></quill-editor>\r\n            <!-- 添加商品的按钮 -->\r\n            <el-button type=\"primary\" class=\"btnAdd\" @click=\"add\">添加商品</el-button>\r\n          </el-tab-pane>\r\n        </el-tabs>\r\n      </el-form>\r\n\r\n    </el-card>\r\n\r\n    <!-- 图片预览 -->\r\n    <el-dialog title=\"图片预览\" :visible.sync=\"previewVisible\" width=\"50%\">\r\n      <img :src=\"previewPath\" alt=\"\" class=\"previewImg\">\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport _ from 'lodash'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      activeIndex: '0',\r\n      // 添加商品的表单数据对象\r\n      addForm: {\r\n        goods_name: '',\r\n        goods_price: 0,\r\n        goods_weight: 0,\r\n        goods_number: 0,\r\n        // 商品所属的分类数组\r\n        goods_cat: [],\r\n        // 图片的数组\r\n        pics: [],\r\n        // 商品的详情描述\r\n        goods_introduce: '',\r\n        attrs: []\r\n      },\r\n      addFormRules: {\r\n        goods_name: [\r\n          { required: true, message: '请输入商品名称', trigger: 'blur' }\r\n        ],\r\n        goods_price: [\r\n          { required: true, message: '请输入商品价格', trigger: 'blur' }\r\n        ],\r\n        goods_weight: [\r\n          { required: true, message: '请输入商品重量', trigger: 'blur' }\r\n        ],\r\n        goods_number: [\r\n          { required: true, message: '请输入商品数量', trigger: 'blur' }\r\n        ],\r\n        goods_cat: [\r\n          { required: true, message: '请选择商品分类', trigger: 'blur' }\r\n        ]\r\n      },\r\n      // 商品分类列表\r\n      catelist: [],\r\n      cateProps: {\r\n        label: 'cat_name',\r\n        value: 'cat_id',\r\n        children: 'children'\r\n      },\r\n      // 动态参数列表数据\r\n      manyTableData: [],\r\n      // 静态属性列表数据\r\n      onlyTableData: [],\r\n      // 上传图片的URL地址\r\n      uploadURL: 'http://127.0.0.1:8888/api/private/v1/upload',\r\n      // 图片上传组件的headers请求头对象\r\n      headerObj: {\r\n        Authorization: window.sessionStorage.getItem('token')\r\n      },\r\n      previewPath: '',\r\n      previewVisible: false\r\n    }\r\n  },\r\n  created() {\r\n    this.getCateList()\r\n  },\r\n  methods: {\r\n    // 获取所有商品分类数据\r\n    async getCateList() {\r\n      const { data: res } = await this.$http.get('categories')\r\n\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error('获取商品分类数据失败！')\r\n      }\r\n\r\n      this.catelist = res.data\r\n      console.log(this.catelist)\r\n    },\r\n    // 级联选择器选中项变化，会触发这个函数\r\n    handleChange() {\r\n      console.log(this.addForm.goods_cat)\r\n      if (this.addForm.goods_cat.length !== 3) {\r\n        this.addForm.goods_cat = []\r\n      }\r\n    },\r\n    beforeTabLeave(activeName, oldActiveName) {\r\n      // console.log('即将离开的标签页名字是：' + oldActiveName)\r\n      // console.log('即将进入的标签页名字是：' + activeName)\r\n      // return false\r\n      if (oldActiveName === '0' && this.addForm.goods_cat.length !== 3) {\r\n        this.$message.error('请先选择商品分类！')\r\n        return false\r\n      }\r\n    },\r\n    async tabClicked() {\r\n      // console.log(this.activeIndex)\r\n      // 证明访问的是动态参数面板\r\n      if (this.activeIndex === '1') {\r\n        const { data: res } = await this.$http.get(\r\n          `categories/${this.cateId}/attributes`,\r\n          {\r\n            params: { sel: 'many' }\r\n          }\r\n        )\r\n\r\n        if (res.meta.status !== 200) {\r\n          return this.$message.error('获取动态参数列表失败！')\r\n        }\r\n\r\n        console.log(res.data)\r\n        res.data.forEach(item => {\r\n          item.attr_vals =\r\n            item.attr_vals.length === 0 ? [] : item.attr_vals.split(' ')\r\n        })\r\n        this.manyTableData = res.data\r\n      } else if (this.activeIndex === '2') {\r\n        const { data: res } = await this.$http.get(\r\n          `categories/${this.cateId}/attributes`,\r\n          {\r\n            params: { sel: 'only' }\r\n          }\r\n        )\r\n\r\n        if (res.meta.status !== 200) {\r\n          return this.$message.error('获取静态属性失败！')\r\n        }\r\n\r\n        console.log(res.data)\r\n        this.onlyTableData = res.data\r\n      }\r\n    },\r\n    // 处理图片预览效果\r\n    handlePreview(file) {\r\n      console.log(file)\r\n      this.previewPath = file.response.data.url\r\n      this.previewVisible = true\r\n    },\r\n    // 处理移除图片的操作\r\n    handleRemove(file) {\r\n      // console.log(file)\r\n      // 1. 获取将要删除的图片的临时路径\r\n      const filePath = file.response.data.tmp_path\r\n      // 2. 从 pics 数组中，找到这个图片对应的索引值\r\n      const i = this.addForm.pics.findIndex(x => x.pic === filePath)\r\n      // 3. 调用数组的 splice 方法，把图片信息对象，从 pics 数组中移除\r\n      this.addForm.pics.splice(i, 1)\r\n      console.log(this.addForm)\r\n    },\r\n    // 监听图片上传成功的事件\r\n    handleSuccess(response) {\r\n      console.log(response)\r\n      // 1. 拼接得到一个图片信息对象\r\n      const picInfo = { pic: response.data.tmp_path }\r\n      // 2. 将图片信息对象，push 到pics数组中\r\n      this.addForm.pics.push(picInfo)\r\n      console.log(this.addForm)\r\n    },\r\n    // 添加商品\r\n    add() {\r\n      this.$refs.addFormRef.validate(async valid => {\r\n        if (!valid) {\r\n          return this.$message.error('请填写必要的表单项！')\r\n        }\r\n        // 执行添加的业务逻辑\r\n        // lodash   cloneDeep(obj)\r\n        const form = _.cloneDeep(this.addForm)\r\n        form.goods_cat = form.goods_cat.join(',')\r\n        // 处理动态参数\r\n        this.manyTableData.forEach(item => {\r\n          const newInfo = {\r\n            attr_id: item.attr_id,\r\n            attr_value: item.attr_vals.join(' ')\r\n          }\r\n          this.addForm.attrs.push(newInfo)\r\n        })\r\n        // 处理静态属性\r\n        this.onlyTableData.forEach(item => {\r\n          const newInfo = { attr_id: item.attr_id, attr_value: item.attr_vals }\r\n          this.addForm.attrs.push(newInfo)\r\n        })\r\n        form.attrs = this.addForm.attrs\r\n        console.log(form)\r\n\r\n        // 发起请求添加商品\r\n        // 商品的名称，必须是唯一的\r\n        const { data: res } = await this.$http.post('goods', form)\r\n\r\n        if (res.meta.status !== 201) {\r\n          return this.$message.error('添加商品失败！')\r\n        }\r\n\r\n        this.$message.success('添加商品成功！')\r\n        this.$router.push('/goods')\r\n      })\r\n    }\r\n  },\r\n  computed: {\r\n    cateId() {\r\n      if (this.addForm.goods_cat.length === 3) {\r\n        return this.addForm.goods_cat[2]\r\n      }\r\n      return null\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.el-checkbox {\r\n  margin: 0 10px 0 0 !important;\r\n}\r\n\r\n.previewImg {\r\n  width: 100%;\r\n}\r\n\r\n.btnAdd {\r\n  margin-top: 15px;\r\n}\r\n</style>\r\n"]}]}